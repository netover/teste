import json
import os
from pathlib import Path
from fastapi.templating import Jinja2Templates
from starlette.requests import Request

# Path to the manifest file generated by Vite
MANIFEST_PATH = Path(__file__).parent.parent.parent / "dist" / "manifest.json"

# Global variable to cache the manifest data
_manifest_cache = {}


def load_manifest():
    """
    Loads the Vite manifest file into a cache.
    In a real production app, you might want to cache this more intelligently.
    """
    if not MANIFEST_PATH.exists():
        print(f"Warning: Vite manifest not found at {MANIFEST_PATH}")
        return {}
    with open(MANIFEST_PATH, "r") as f:
        return json.load(f)


def get_asset_urls(entry_point: str) -> dict:
    """
    Gets the URLs for the CSS and JS assets for a given entry point.

    Args:
        entry_point: The name of the entry point (e.g., 'static/js/main.js').

    Returns:
        A dictionary with 'js' and 'css' keys.
    """
    global _manifest_cache
    if not _manifest_cache:
        _manifest_cache = load_manifest()

    if not _manifest_cache or entry_point not in _manifest_cache:
        print(f"Error: Entry point '{entry_point}' not found in manifest.")
        return {"js": "", "css": ""}

    manifest_entry = _manifest_cache[entry_point]

    # The base URL for assets should point to the dist directory
    base_url = "/dist/"

    return {
        "js": f"{base_url}{manifest_entry.get('file', '')}",
        "css": f"{base_url}{manifest_entry.get('css', [''])[0]}" if manifest_entry.get('css') else ""
    }

def setup_jinja_env(templates: Jinja2Templates):
    """
    Adds the get_asset_urls function to the Jinja2 global environment.
    This makes the function available in all templates.
    """
    templates.env.globals['asset'] = get_asset_urls
