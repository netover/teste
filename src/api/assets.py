import json
import os
from pathlib import Path
from fastapi.templating import Jinja2Templates
from starlette.requests import Request

from src.core import config

# Path to the manifest file generated by Vite
MANIFEST_PATH = Path(__file__).parent.parent.parent / "dist" / ".vite" / "manifest.json"
VITE_DEV_SERVER = "http://localhost:5173"

# Global variable to cache the manifest data
_manifest_cache = {}


def load_manifest():
    """Loads the Vite manifest file into a cache."""
    if not MANIFEST_PATH.exists():
        return {}
    with open(MANIFEST_PATH, "r") as f:
        return json.load(f)


def get_asset_urls(entry_point: str) -> dict:
    """
    Gets the URLs for the CSS and JS assets for a given entry point.
    In development, it points to the Vite dev server.
    In production, it reads the manifest file.
    """
    if config.APP_ENV == "development" or config.TESTING:
        # In development or testing, Vite serves the files directly.
        # We need to include the base and the entry point script.
        return {
            "js": f"{VITE_DEV_SERVER}/static/js/{entry_point}",
            "css": "", # CSS is injected by Vite's HMR
            "vite_client": f"{VITE_DEV_SERVER}/@vite/client"
        }

    global _manifest_cache
    if not _manifest_cache:
        _manifest_cache = load_manifest()

    if not _manifest_cache or f"static/js/{entry_point}" not in _manifest_cache:
        raise RuntimeError(f"Entry point '{entry_point}' not found in manifest.json")

    manifest_entry = _manifest_cache[f"static/js/{entry_point}"]
    base_url = "/dist/"

    return {
        "js": f"{base_url}{manifest_entry.get('file', '')}",
        "css": f"{base_url}{manifest_entry.get('css', [''])[0]}" if manifest_entry.get('css') else "",
        "vite_client": ""
    }


def setup_jinja_env(templates: Jinja2Templates):
    """
    Adds the get_asset_urls function to the Jinja2 global environment.
    This makes the function available in all templates.
    """
    templates.env.globals['asset'] = get_asset_urls
