from pydantic import BaseModel
from datetime import datetime
from typing import Optional

from .database import JobStatusEnum, AlertSeverityEnum

# --- Job Status History Schemas ---

class JobStatusHistoryBase(BaseModel):
    """
    Base schema for job status history, containing common fields.
    """
    job_id: str
    job_name: str
    old_status: Optional[str] = None
    new_status: str
    workstation: Optional[str] = None
    duration: Optional[float] = None
    error_message: Optional[str] = None

class JobStatusHistoryCreate(JobStatusHistoryBase):
    """
    Schema used for creating a new job status history entry.
    No new fields needed here, inherits all from Base.
    """
    pass

class JobStatusHistory(JobStatusHistoryBase):
    """
    Schema for reading a job status history entry from the API.
    Includes fields that are generated by the database.
    """
    id: int
    timestamp: datetime

    class Config:
        orm_mode = True # In Pydantic v2, this is from_attributes = True
        from_attributes = True


# --- Alert Rule Schemas ---

class AlertRuleBase(BaseModel):
    """
    Base schema for an alert rule.
    """
    name: str
    job_name_pattern: str = "*"
    status_trigger: JobStatusEnum
    severity: AlertSeverityEnum = AlertSeverityEnum.HIGH
    is_active: bool = True

class AlertRuleCreate(AlertRuleBase):
    """
    Schema for creating a new alert rule.
    """
    pass

class AlertRuleUpdate(BaseModel):
    """
    Schema for updating an existing alert rule. All fields are optional.
    """
    name: Optional[str] = None
    job_name_pattern: Optional[str] = None
    status_trigger: Optional[JobStatusEnum] = None
    severity: Optional[AlertSeverityEnum] = None
    is_active: Optional[bool] = None


class AlertRule(AlertRuleBase):
    """
    Schema for reading an alert rule from the API.
    """
    id: int

    class Config:
        orm_mode = True
        from_attributes = True
